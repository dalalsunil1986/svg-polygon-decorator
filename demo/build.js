(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.svgCloud = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _decorator = require('../src/decorator');

var _decorator2 = _interopRequireDefault(_decorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cloudEl1 = document.querySelector('#cloud1');
var cloudEl2 = document.querySelector('#cloud2');

var radius = 8;

var coordinates = [[10, 120], [180, 120], [230, 180]];

var cloud1 = (0, _decorator2.default)(coordinates, radius);
cloudEl1.setAttribute('d', cloud1);

var coordinates2 = [[20, 300], [180, 300], [200, 330], [190, 360], [140, 420], [70, 380]];

var cloud2 = (0, _decorator2.default)(coordinates2, radius);
cloudEl2.setAttribute('d', cloud2);

},{"../src/decorator":2}],2:[function(require,module,exports){
'use strict';

/**
 * Generates svg cloud for polygon
 *
 * @param  {Polygon} poligon
 *
 * @return {Path}
 */

var lineSegmentIntersection = function lineSegmentIntersection(circle, radius, pointA, pointB) {
  var xShift = circle.x;
  var yShift = circle.y;

  //Recet circle to (0,0) coordinate
  circle.x = 0;
  circle.y = 0;
  pointA.x -= xShift;
  pointA.y -= yShift;
  pointB.x -= xShift;
  pointB.y -= yShift;

  var k = (pointB.y - pointA.y) / (pointB.x - pointA.x);
  var b = pointA.y - pointA.x * (pointB.y - pointA.y) / (pointB.x - pointA.x);

  var A = 1 + k * k;
  var B = 2 * k * b;
  var C = b * b - radius * radius;
  var D = B * B - 4 * A * C;

  var x1 = null;
  var x2 = null;
  var y1 = null;
  var y2 = null;

  if (0 < D) {
    console.log('2 points intersects');
    x1 = (-B + Math.sqrt(D)) / (2 * A);
    x2 = (-B - Math.sqrt(D)) / (2 * A);

    if (pointA.x < x1 && pointB.x > x1) {
      return [x1 + xShift, x1 * k + b + yShift];
    }
  } else if (0 === D) {
    console.log('1 point intersect');
    x1 = x2 = (-B + Math.sqrt(D)) / (2 * A);
  } else {
    console.log('0 points intersect');
  }

  return null !== x2 ? [x2 + xShift, x2 * k + b + yShift] : null;
};

var lineLength = function lineLength(line) {
  var pointA = line[0];
  var pointB = line[1];
  var xA = pointA[0];
  var xB = pointB[0];
  var yA = pointA[1];
  var yB = pointB[1];

  return Math.sqrt(Math.pow(xB - xA, 2) + Math.pow(yB - yA, 2));
};

var getIntersection = function getIntersection(line, length) {
  var pointC = null;
  var pointA = line[0];
  var pointB = line[1];
  var xA = pointA[0];
  var xB = pointB[0];
  var yA = pointA[1];
  var yB = pointB[1];
  var delta = void 0;
  var xPoint = void 0;
  var yPoint = void 0;

  var fullLen = lineLength(line);
  var ESP = 0.001;
  if (Math.abs(fullLen - length) < ESP) {
    pointC = pointB;
  } else if (fullLen > length) {
    delta = length / (fullLen - length);
    xPoint = (xA + delta * xB) / (1 + delta);
    yPoint = (yA + delta * yB) / (1 + delta);
    pointC = [xPoint, yPoint];
  }

  return pointC;
};

var cloudALine = function cloudALine(line, radius, nextLine) {
  var lineLength = void 0;
  var pointA = line[0];
  var pointB = line[1];
  var intersection = getIntersection(line, radius * 2);

  var cloud = ['M ' + line[0][0] + ', ' + line[0][1]];
  while (intersection) {
    cloud.push(' A ' + radius + ' ' + radius + ' 0 1 1 ' + intersection[0] + ' ' + intersection[1]);
    line = [intersection, line[1]];
    intersection = getIntersection(line, radius * 2);
  }

  // if (nextLine) {
  //   let nextPoint = lineSegmentIntersection(
  //     {
  //       x: line[0][0] + radius,
  //       y: line[0][1]
  //     },
  //     radius,
  //     {
  //       x: nextLine[0][0],
  //       y: nextLine[0][1]
  //     },
  //     {
  //       x: nextLine[1][0],
  //       y: nextLine[1][1]
  //     }
  //   );
  //
  //   if (null !== nextPoint) {
  //     cloud.push(' A ' + radius + ' ' + radius + ' 0 1 1 ' + nextPoint[0] + ' ' + nextPoint[1]);
  //   }
  // }
  return cloud.join('');
};

var fixRadiusToFitLine = function fixRadiusToFitLine(line, radius) {
  var length = lineLength(line);
  var segments = Math.round(length / (2 * radius) + 0.5);
  var newRadius = length / segments;
  return length / segments / 2;
};

var svgCloud = function svgCloud(poligon, radius) {
  var cloud = 'M ' + poligon[0][0] + ', ' + poligon[0][1];
  var ind = 1;
  var line = void 0;
  var cnt = poligon.length;

  for (; ind < cnt; ++ind) {
    line = [poligon[ind - 1], poligon[ind]];
    cloud += cloudALine(line, fixRadiusToFitLine(line, radius));
  }

  line = [poligon[ind - 1], poligon[0]];
  cloud += cloudALine(line, fixRadiusToFitLine(line, radius));

  return cloud;
};

module.exports = svgCloud;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
